/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AccountRegistryInterface extends utils.Interface {
  functions: {
    "accounts(address)": FunctionFragment;
    "getAccountAddress(address,bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAccount(address)": FunctionFragment;
    "isDeviceRegistered(bytes32)": FunctionFragment;
    "isWhitelistCaller(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccountAddress(address,bytes32,address)": FunctionFragment;
    "setWhitelistCaller(address,bool)": FunctionFragment;
    "storeAccount(address)": FunctionFragment;
    "storeDevice(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accounts"
      | "getAccountAddress"
      | "initialize"
      | "isAccount"
      | "isDeviceRegistered"
      | "isWhitelistCaller"
      | "owner"
      | "renounceOwnership"
      | "setAccountAddress"
      | "setWhitelistCaller"
      | "storeAccount"
      | "storeDevice"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "accounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAccountAddress",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAccount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isDeviceRegistered",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistCaller",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountAddress",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistCaller",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "storeAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDevice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeviceRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDevice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AccountStored(address)": EventFragment;
    "DeviceStored(bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountStored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeviceStored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AccountStoredEventObject {
  accountAddress: string;
}
export type AccountStoredEvent = TypedEvent<[string], AccountStoredEventObject>;

export type AccountStoredEventFilter = TypedEventFilter<AccountStoredEvent>;

export interface DeviceStoredEventObject {
  deviceId: string;
}
export type DeviceStoredEvent = TypedEvent<[string], DeviceStoredEventObject>;

export type DeviceStoredEventFilter = TypedEventFilter<DeviceStoredEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AccountRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accounts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getAccountAddress(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isAccount(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isDeviceRegistered(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccountAddress(
      _owner: string,
      _salt: BytesLike,
      _accountAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWhitelistCaller(
      _caller: string,
      _isAllow: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    storeAccount(
      _accountAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    storeDevice(
      _deviceId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  accounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getAccountAddress(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isAccount(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isDeviceRegistered(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistCaller(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccountAddress(
    _owner: string,
    _salt: BytesLike,
    _accountAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWhitelistCaller(
    _caller: string,
    _isAllow: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  storeAccount(
    _accountAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  storeDevice(
    _deviceId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    accounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getAccountAddress(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAccount(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isDeviceRegistered(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccountAddress(
      _owner: string,
      _salt: BytesLike,
      _accountAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistCaller(
      _caller: string,
      _isAllow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    storeAccount(
      _accountAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDevice(_deviceId: BytesLike, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountStored(address)"(accountAddress?: null): AccountStoredEventFilter;
    AccountStored(accountAddress?: null): AccountStoredEventFilter;

    "DeviceStored(bytes32)"(deviceId?: null): DeviceStoredEventFilter;
    DeviceStored(deviceId?: null): DeviceStoredEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    accounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountAddress(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isAccount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDeviceRegistered(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAccountAddress(
      _owner: string,
      _salt: BytesLike,
      _accountAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWhitelistCaller(
      _caller: string,
      _isAllow: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    storeAccount(
      _accountAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    storeDevice(
      _deviceId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountAddress(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeviceRegistered(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistCaller(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccountAddress(
      _owner: string,
      _salt: BytesLike,
      _accountAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWhitelistCaller(
      _caller: string,
      _isAllow: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    storeAccount(
      _accountAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    storeDevice(
      _deviceId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
