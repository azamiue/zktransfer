/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace MultiplierPointStaking {
  export type RewardDataStruct = {
    rewardTokens: string[];
    rewardAmounts: BigNumberish[];
  };

  export type RewardDataStructOutput = [string[], BigNumber[]] & {
    rewardTokens: string[];
    rewardAmounts: BigNumber[];
  };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "START_AT_EPOCH()": FunctionFragment;
    "calculateRewardsEarned(address)": FunctionFragment;
    "claimPointReward()": FunctionFragment;
    "claimReward()": FunctionFragment;
    "claimedAtEpoch(address)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "currentEpochStartAt()": FunctionFragment;
    "distributeReward(address[],uint256[],uint256)": FunctionFragment;
    "forceNewEpoch()": FunctionFragment;
    "getEpochReward(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUnstakeRequests(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "makeRequest(uint256)": FunctionFragment;
    "mockForceNewEpoch()": FunctionFragment;
    "owner()": FunctionFragment;
    "pointManager()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardTokens(address)": FunctionFragment;
    "setRewardToken(address,bool)": FunctionFragment;
    "setTimelock(uint256)": FunctionFragment;
    "setUnstakeNumberEpochs(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeToken()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "timelock()": FunctionFragment;
    "totalAmountBeingUnstake(address)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalStakedAtEpoch(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "unstakeNumberEpochs()": FunctionFragment;
    "unstakeRequests(address,uint256)": FunctionFragment;
    "userStaked(address)": FunctionFragment;
    "userStakedAtEpoch(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER_ROLE"
      | "START_AT_EPOCH"
      | "calculateRewardsEarned"
      | "claimPointReward"
      | "claimReward"
      | "claimedAtEpoch"
      | "currentEpoch"
      | "currentEpochStartAt"
      | "distributeReward"
      | "forceNewEpoch"
      | "getEpochReward"
      | "getRoleAdmin"
      | "getUnstakeRequests"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "makeRequest"
      | "mockForceNewEpoch"
      | "owner"
      | "pointManager"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "rewardTokens"
      | "setRewardToken"
      | "setTimelock"
      | "setUnstakeNumberEpochs"
      | "stake"
      | "stakeToken"
      | "supportsInterface"
      | "timelock"
      | "totalAmountBeingUnstake"
      | "totalStaked"
      | "totalStakedAtEpoch"
      | "transferOwnership"
      | "unstake"
      | "unstakeNumberEpochs"
      | "unstakeRequests"
      | "userStaked"
      | "userStakedAtEpoch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_AT_EPOCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardsEarned",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPointReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedAtEpoch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochStartAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceNewEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnstakeRequests",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "makeRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockForceNewEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakeNumberEpochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAmountBeingUnstake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedAtEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeNumberEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeRequests",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userStaked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userStakedAtEpoch",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_AT_EPOCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardsEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPointReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochStartAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceNewEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnstakeRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockForceNewEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakeNumberEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountBeingUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNumberEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userStakedAtEpoch",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewEpochForced(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "RequestCreated(address,uint256,uint256,uint256)": EventFragment;
    "RewardDistributed(address,address[],uint256[],uint256)": EventFragment;
    "RewardTokenUpdated(address,bool)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TimelockUpdated(uint256)": EventFragment;
    "TokenStaked(address,uint256,uint256,uint256)": EventFragment;
    "TokenUnStaked(address,uint256,uint256,uint256)": EventFragment;
    "UnstakeNumberEpochs(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEpochForced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimelockUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeNumberEpochs"): EventFragment;
}

export interface ClaimedEventObject {
  user: string;
  token: string;
  amount: BigNumber;
  atEpoch: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewEpochForcedEventObject {
  currentEpoch: BigNumber;
  startAt: BigNumber;
}
export type NewEpochForcedEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewEpochForcedEventObject
>;

export type NewEpochForcedEventFilter = TypedEventFilter<NewEpochForcedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReceivedEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  ReceivedEventObject
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface RequestCreatedEventObject {
  user: string;
  amount: BigNumber;
  epochCanClaim: BigNumber;
  totalRequestVolume: BigNumber;
}
export type RequestCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RequestCreatedEventObject
>;

export type RequestCreatedEventFilter = TypedEventFilter<RequestCreatedEvent>;

export interface RewardDistributedEventObject {
  user: string;
  tokens: string[];
  amounts: BigNumber[];
  epoch: BigNumber;
}
export type RewardDistributedEvent = TypedEvent<
  [string, string[], BigNumber[], BigNumber],
  RewardDistributedEventObject
>;

export type RewardDistributedEventFilter =
  TypedEventFilter<RewardDistributedEvent>;

export interface RewardTokenUpdatedEventObject {
  arg0: string;
  arg1: boolean;
}
export type RewardTokenUpdatedEvent = TypedEvent<
  [string, boolean],
  RewardTokenUpdatedEventObject
>;

export type RewardTokenUpdatedEventFilter =
  TypedEventFilter<RewardTokenUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TimelockUpdatedEventObject {
  value: BigNumber;
}
export type TimelockUpdatedEvent = TypedEvent<
  [BigNumber],
  TimelockUpdatedEventObject
>;

export type TimelockUpdatedEventFilter = TypedEventFilter<TimelockUpdatedEvent>;

export interface TokenStakedEventObject {
  user: string;
  amount: BigNumber;
  totalStaked: BigNumber;
  epoch: BigNumber;
}
export type TokenStakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  TokenStakedEventObject
>;

export type TokenStakedEventFilter = TypedEventFilter<TokenStakedEvent>;

export interface TokenUnStakedEventObject {
  user: string;
  amount: BigNumber;
  totalStaked: BigNumber;
  epoch: BigNumber;
}
export type TokenUnStakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  TokenUnStakedEventObject
>;

export type TokenUnStakedEventFilter = TypedEventFilter<TokenUnStakedEvent>;

export interface UnstakeNumberEpochsEventObject {
  value: BigNumber;
}
export type UnstakeNumberEpochsEvent = TypedEvent<
  [BigNumber],
  UnstakeNumberEpochsEventObject
>;

export type UnstakeNumberEpochsEventFilter =
  TypedEventFilter<UnstakeNumberEpochsEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    START_AT_EPOCH(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateRewardsEarned(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    claimPointReward(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimedAtEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpochStartAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeReward(
      _tokens: string[],
      _rewards: BigNumberish[],
      _epoch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceNewEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getEpochReward(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MultiplierPointStaking.RewardDataStructOutput]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getUnstakeRequests(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _stakeToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    makeRequest(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mockForceNewEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pointManager(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setRewardToken(
      _token: string,
      _status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUnstakeNumberEpochs(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAmountBeingUnstake(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amounts: BigNumber }>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedAtEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstake(
      _epoch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakeNumberEpochs(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstakeRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userStaked(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userStakedAtEpoch(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        blockTime: BigNumber;
        totalContributed: BigNumber;
      }
    >;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  START_AT_EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

  calculateRewardsEarned(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  claimPointReward(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimReward(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimedAtEpoch(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpochStartAt(overrides?: CallOverrides): Promise<BigNumber>;

  distributeReward(
    _tokens: string[],
    _rewards: BigNumberish[],
    _epoch: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceNewEpoch(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getEpochReward(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MultiplierPointStaking.RewardDataStructOutput>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getUnstakeRequests(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _stakeToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  makeRequest(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mockForceNewEpoch(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pointManager(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setRewardToken(
    _token: string,
    _status: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUnstakeNumberEpochs(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeToken(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timelock(overrides?: CallOverrides): Promise<BigNumber>;

  totalAmountBeingUnstake(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedAtEpoch(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstake(
    _epoch: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakeNumberEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  unstakeRequests(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userStakedAtEpoch(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      blockTime: BigNumber;
      totalContributed: BigNumber;
    }
  >;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    START_AT_EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewardsEarned(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    claimPointReward(overrides?: CallOverrides): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    claimedAtEpoch(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStartAt(overrides?: CallOverrides): Promise<BigNumber>;

    distributeReward(
      _tokens: string[],
      _rewards: BigNumberish[],
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceNewEpoch(overrides?: CallOverrides): Promise<void>;

    getEpochReward(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MultiplierPointStaking.RewardDataStructOutput>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getUnstakeRequests(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(_stakeToken: string, overrides?: CallOverrides): Promise<void>;

    makeRequest(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mockForceNewEpoch(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pointManager(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setRewardToken(
      _token: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(
      _timelock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnstakeNumberEpochs(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeToken(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountBeingUnstake(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedAtEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(_epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstakeNumberEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userStakedAtEpoch(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        blockTime: BigNumber;
        totalContributed: BigNumber;
      }
    >;
  };

  filters: {
    "Claimed(address,address,uint256,uint256)"(
      user?: string | null,
      token?: string | null,
      amount?: null,
      atEpoch?: null
    ): ClaimedEventFilter;
    Claimed(
      user?: string | null,
      token?: string | null,
      amount?: null,
      atEpoch?: null
    ): ClaimedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewEpochForced(uint256,uint256)"(
      currentEpoch?: null,
      startAt?: null
    ): NewEpochForcedEventFilter;
    NewEpochForced(
      currentEpoch?: null,
      startAt?: null
    ): NewEpochForcedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Received(address,uint256)"(arg0?: null, arg1?: null): ReceivedEventFilter;
    Received(arg0?: null, arg1?: null): ReceivedEventFilter;

    "RequestCreated(address,uint256,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      epochCanClaim?: null,
      totalRequestVolume?: null
    ): RequestCreatedEventFilter;
    RequestCreated(
      user?: string | null,
      amount?: null,
      epochCanClaim?: null,
      totalRequestVolume?: null
    ): RequestCreatedEventFilter;

    "RewardDistributed(address,address[],uint256[],uint256)"(
      user?: string | null,
      tokens?: null,
      amounts?: null,
      epoch?: null
    ): RewardDistributedEventFilter;
    RewardDistributed(
      user?: string | null,
      tokens?: null,
      amounts?: null,
      epoch?: null
    ): RewardDistributedEventFilter;

    "RewardTokenUpdated(address,bool)"(
      arg0?: null,
      arg1?: null
    ): RewardTokenUpdatedEventFilter;
    RewardTokenUpdated(arg0?: null, arg1?: null): RewardTokenUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TimelockUpdated(uint256)"(value?: null): TimelockUpdatedEventFilter;
    TimelockUpdated(value?: null): TimelockUpdatedEventFilter;

    "TokenStaked(address,uint256,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      totalStaked?: null,
      epoch?: null
    ): TokenStakedEventFilter;
    TokenStaked(
      user?: string | null,
      amount?: null,
      totalStaked?: null,
      epoch?: null
    ): TokenStakedEventFilter;

    "TokenUnStaked(address,uint256,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      totalStaked?: null,
      epoch?: null
    ): TokenUnStakedEventFilter;
    TokenUnStaked(
      user?: string | null,
      amount?: null,
      totalStaked?: null,
      epoch?: null
    ): TokenUnStakedEventFilter;

    "UnstakeNumberEpochs(uint256)"(
      value?: null
    ): UnstakeNumberEpochsEventFilter;
    UnstakeNumberEpochs(value?: null): UnstakeNumberEpochsEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    START_AT_EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewardsEarned(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPointReward(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimReward(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    claimedAtEpoch(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStartAt(overrides?: CallOverrides): Promise<BigNumber>;

    distributeReward(
      _tokens: string[],
      _rewards: BigNumberish[],
      _epoch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceNewEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getEpochReward(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnstakeRequests(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stakeToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    makeRequest(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mockForceNewEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pointManager(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setRewardToken(
      _token: string,
      _status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTimelock(
      _timelock: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUnstakeNumberEpochs(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountBeingUnstake(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedAtEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstake(
      _epoch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstakeNumberEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userStakedAtEpoch(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    START_AT_EPOCH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRewardsEarned(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimPointReward(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimedAtEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpochStartAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeReward(
      _tokens: string[],
      _rewards: BigNumberish[],
      _epoch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceNewEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getEpochReward(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnstakeRequests(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _stakeToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    makeRequest(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mockForceNewEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardToken(
      _token: string,
      _status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUnstakeNumberEpochs(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmountBeingUnstake(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedAtEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstake(
      _epoch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakeNumberEpochs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstakeRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStakedAtEpoch(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
